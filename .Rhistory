ls()
outlier.vec
i
outlier.vec
outlier.vec
outlier.vec
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
sample <- matrix(1:9, nrow = 3)
sample
tukey_multiple(sample)
debug(tukey.outlier)
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
debug(tukey.outlier)
tukey.outlier(sample)
ls()
set
outlier
outlier
ls()
i
outlier
i
outlier
q
quit
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead oof the given code so that it works.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
sample <- matrix(1:9, nrow = 3)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead oof the given code so that it works.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
sample <- matrix(1:30, nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead oof the given code so that it works.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
sample <- matrix(1:30, byrow = T, nrow = 5)
sample
tukey_multiple(sample)
sample <- matrix(floor(rnorm(30, mean=50, sd=5)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
sample <- matrix(floor(rnorm(30, mean=50, sd=5)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
seet.seed(252)
sample <- matrix(floor(rnorm(30, mean=50, sd=5)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
set.seed(252)
sample <- matrix(floor(rnorm(30, mean=50, sd=5)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
set.seed(252)
sample <- matrix(floor(rnorm(30, mean=50, sd=5)), nrow = 5)
sample
tukey_multiple(sample)
help(runif)
set.seed(252)
sample <- matrix(floor(runif(n=30)), nrow = 5)
sample
tukey_multiple(sample)
set.seed(252)
sample <- matrix(floor(runif(n=30, max=50)), nrow = 5)
sample
tukey_multiple(sample)
set.seed(252)
sample <- matrix(floor(runif(n=30, max=50)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
set.seed(252)
sample <- matrix(floor(runif(n=30, max=50)), nrow = 5)
sample
tukey_multiple(sample)
#Module 11 Assignment: Debugging and Defensive Programming
#For this assignment, the code for the tukey_multiple() function is provided with errors.
#It has to be debugged for it to work.
#The tukey.outlier() function is defined ahead of the given code so that it works.
#It returns a vector of logicals indicating outliers.
tukey.outlier <- function(set) {
outlier <- vector(length=length(set))
for (i in 1:length(outlier)) {
if (set[i] > mean(set) + 3*sd(set) || set[i] < mean(set) - 3*sd(set)) {
outlier[i] <- TRUE
}
}
return(outlier)
}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) }
return(outlier.vec) }
#Some code is added to test the tukey_multiple() function.
set.seed(252)
sample <- matrix(floor(runif(n=30, max=50)), nrow = 5)
sample
tukey_multiple(sample)
library(available)
install.packages(available)
install.packages("available")
library("available")
available("ProteinAnalyst")
help(available)
available("ProteinAnalyst")
library("available")
available("ProteinAnalyst")
library(available)
available("ProteinAnalyst")
file("Documents\ProteinAnalyst\SampleData\APP-fasta.txt", "r")
file("Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
help(use_github)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
APP
readLines(con=APP)
readLines(con=APP, n=1)
readLines(con=APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP)
readLines(APP, n=-5)
seek(APP, where=0)
readLines(APP, n=1)
seek(APP, where=5)
readLines(APP, n=1)
length("this is a tests")
length("test", "M")
length(c("test", "M"))
nchar("test")
nchar("this is war")
cat("this", "is", "life")
cat("this", "is", "life", sep="")
strsplit("this.is.love", sep=".")
strsplit("this.is.love", split=".")
strsplit("this-is-love", split="-")
strsplit(APP, split="\n")
strsplit(APP, split="/n")
strsplit(APP, split="")
APP
seek(APP, where=0)
readlines("This is the sound")
readLines("This is the sound")
readLines(APP)
seek(APP, where=0)
file("https://www.uniprot.org/uniprot/P05067.fasta", r)
file("https://www.uniprot.org/uniprot/P05067.fasta", "r")
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
append("sequence", readLines(APP, n=1))
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
readLines(APP, n=1)
seek(APP, where=0)
readLines(APP)
readLines(APP)
seek(APP, where=0)
seq.lines <- readLines(APP)
seq.lines
seq.lines[2:14]
seq.lines[2:length(seq.lines)]
close(APP)
APP
open(APP)
readLines(APP)
library(ProteinAnalyst)
install.packages("Rtools")
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
get.seq(APP)
APP
open(APP)
APP
get.seq(APP)
library(ProteinAnalyst)
APP
open(APP)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
help("get.seq")
nchar(get.seq(APP))
sequence <- get.seq(APP)
nchar(sequence)
x <- 4+5*2
x
sequence <- get.seq(APP)
library(ProteinAnalyst)
help("get.seq")
APP
open(APP)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
APP
open(APP)
get.seq(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
seque <- get.seq(A)
seque <- get.seq(APP)
nchar(seque)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
open(APP)
get.seq(APP)
seq <- get.seq(APP)
nchar(seq)
library(ProteinAnalyst)
APP
open(APP)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt")
APP
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
open(APP)
APP
protein.length(APP)
APP
protein.length(APP)
install.packages(stringr)
install.packages("stringr")
library(stringr)
str_count("this is a test", "s")
str_count("this is a test", "h")
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
APP
count.aa.type(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.type(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.type(APP)
example.list <- list(G=0, A=3)
example.list
example.list[A]
example.list["A"]
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.type(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.type(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.categ(APP)
example.list <- count.aa.type(APP)
example.list["G"]
example.list["G"] + example.list["A"]
example.list["G"] <- 24
example.list["G"]
as.integer(example.list["G"]) + as.integer(example.list["A"])
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
example <- count.aa.type(APP)
example["G"] + example["A"]
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
example <- count.aa.type(APP)
example["G"] + example["A"]
example[G] + example[A]
is.integer(example["G"])
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
example <- count.aa.type(APP)
example["G"] + example["A"]
example
example$G + example$A
example$W + example$K
library(ProteinAnalyst)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.categ(APP)
library(ProteinAnalyst)
APP <- file("C:/Users/WNamm/Documents/ProteinAnalyst/SampleData/APP-fasta.txt", "r")
count.aa.categ(APP)
count.aa.type(APP)
